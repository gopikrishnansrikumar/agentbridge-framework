"""
Type definitions for JSON-RPC communication and agent-related data models.

This module defines request/response schemas for conversations, messages,
tasks, agents, and events used in the AgentBridge framework.
"""

from typing import Annotated, Any, Literal
from uuid import uuid4

from a2a.types import AgentCard, Message, Task
from pydantic import BaseModel, Field, TypeAdapter


# -------------------------------------------------------------------
# Base JSON-RPC message types
# -------------------------------------------------------------------
class JSONRPCMessage(BaseModel):
    """Base structure for JSON-RPC messages."""
    jsonrpc: Literal["2.0"] = "2.0"
    id: int | str | None = Field(default_factory=lambda: uuid4().hex)


class JSONRPCRequest(JSONRPCMessage):
    """Base class for all JSON-RPC requests."""
    method: str
    params: Any | None = None


class JSONRPCError(BaseModel):
    """Error object returned in a JSON-RPC response."""
    code: int
    message: str
    data: Any | None = None


class JSONRPCResponse(JSONRPCMessage):
    """Base class for all JSON-RPC responses."""
    result: Any | None = None
    error: JSONRPCError | None = None


# -------------------------------------------------------------------
# Conversation and Event models
# -------------------------------------------------------------------
class Conversation(BaseModel):
    """A conversation containing messages and tasks."""
    conversation_id: str
    is_active: bool
    name: str = ""
    task_ids: list[str] = Field(default_factory=list)
    messages: list[Message] = Field(default_factory=list)


class Event(BaseModel):
    """Represents an event generated by the system or agents."""
    id: str
    actor: str = ""
    content: Message
    timestamp: float


# -------------------------------------------------------------------
# Message-related requests/responses
# -------------------------------------------------------------------
class SendMessageRequest(JSONRPCRequest):
    method: Literal["message/send"] = "message/send"
    params: Message


class ListMessageRequest(JSONRPCRequest):
    method: Literal["message/list"] = "message/list"
    params: str  # conversation_id


class ListMessageResponse(JSONRPCResponse):
    result: list[Message] | None = None


class MessageInfo(BaseModel):
    """Lightweight message metadata."""
    message_id: str
    context_id: str


class SendMessageResponse(JSONRPCResponse):
    result: Message | MessageInfo | None = None


# -------------------------------------------------------------------
# Event-related requests/responses
# -------------------------------------------------------------------
class GetEventRequest(JSONRPCRequest):
    method: Literal["events/get"] = "events/get"


class GetEventResponse(JSONRPCResponse):
    result: list[Event] | None = None


# -------------------------------------------------------------------
# Conversation-related requests/responses
# -------------------------------------------------------------------
class ListConversationRequest(JSONRPCRequest):
    method: Literal["conversation/list"] = "conversation/list"


class ListConversationResponse(JSONRPCResponse):
    result: list[Conversation] | None = None


class CreateConversationRequest(JSONRPCRequest):
    method: Literal["conversation/create"] = "conversation/create"


class CreateConversationResponse(JSONRPCResponse):
    result: Conversation | None = None


# -------------------------------------------------------------------
# Message queue / pending messages
# -------------------------------------------------------------------
class PendingMessageRequest(JSONRPCRequest):
    method: Literal["message/pending"] = "message/pending"


class PendingMessageResponse(JSONRPCResponse):
    result: list[tuple[str, str]] | None = None


# -------------------------------------------------------------------
# Task-related requests/responses
# -------------------------------------------------------------------
class ListTaskRequest(JSONRPCRequest):
    method: Literal["task/list"] = "task/list"


class ListTaskResponse(JSONRPCResponse):
    result: list[Task] | None = None


# -------------------------------------------------------------------
# Agent-related requests/responses
# -------------------------------------------------------------------
class RegisterAgentRequest(JSONRPCRequest):
    method: Literal["agent/register"] = "agent/register"
    params: str | None = None  # base URL of the agent card


class RegisterAgentResponse(JSONRPCResponse):
    result: str | None = None


class ListAgentRequest(JSONRPCRequest):
    method: Literal["agent/list"] = "agent/list"


class ListAgentResponse(JSONRPCResponse):
    result: list[AgentCard] | None = None


# -------------------------------------------------------------------
# Type adapter for request routing
# -------------------------------------------------------------------
AgentRequest = TypeAdapter(
    Annotated[
        SendMessageRequest | ListConversationRequest,
        Field(discriminator="method"),
    ]
)


# -------------------------------------------------------------------
# Custom exceptions for agent client errors
# -------------------------------------------------------------------
class AgentClientError(Exception):
    """Base exception for Agent client errors."""


class AgentClientHTTPError(AgentClientError):
    """Raised when an HTTP request to the agent service fails."""
    def __init__(self, status_code: int, message: str):
        self.status_code = status_code
        self.message = message
        super().__init__(f"HTTP Error {status_code}: {message}")


class AgentClientJSONError(AgentClientError):
    """Raised when JSON parsing of a response fails."""
    def __init__(self, message: str):
        self.message = message
        super().__init__(f"JSON Error: {message}")
